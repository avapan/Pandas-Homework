Heroes Of Pymoli Data Analysis
Of the 1163 active players, the vast majority are male (84%). There also exists, a smaller, but notable proportion of female players (14%).

Our peak age demographic falls between 20-24 (44.8%) with secondary groups falling between 15-19 (18.60%) and 25-29 (13.4%).

Note
Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.

# Dependencies and Setup
import pandas as pd
import numpy as np
?
# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"
?
# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file_to_load)
Player Count
Display the total number of players

value_
playercount = len(purchase_data["SN"].value_counts())
pd.DataFrame([playercount], columns = ["Total Players"])
Total Players
0	576
Purchasing Analysis (Total)
Run basic calculations to obtain number of unique items, average price, etc.
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame

summary_data
num_unique_items = len(purchase_data["Item Name"].value_counts())
avg_price = round(purchase_data["Price"].mean(), 2)
num_purchases = purchase_data["Price"].count()
total_revenue = round(purchase_data["Price"].sum(), 2)
?
purchase_analysis = []
?
purchase_analysis.append(num_unique_items)
purchase_analysis.append("$" + str(avg_price))
purchase_analysis.append(num_purchases)
purchase_analysis.append("$" + str(total_revenue))
?
summary_data = pd.DataFrame([purchase_analysis], columns = ["Number of Unique Items", "Average Price", "Number of Purchases", "Total Revenue"])
summary_data
Number of Unique Items	Average Price	Number of Purchases	Total Revenue
0	179	$3.05	780	$2379.77
Gender Demographics
Percentage and Count of Male Players
Percentage and Count of Female Players
Percentage and Count of Other / Non-Disclosed

total_count = purchase_data["SN"].nunique()
male_count = purchase_data[purchase_data["Gender"] == "Male"]["SN"].nunique()
female_count = purchase_data[purchase_data["Gender"] == "Female"]["SN"].nunique()
other_count = total_count - male_count - female_count
percentage_male = ((male_count/total_count)*100)
percentage_female = ((female_count/total_count)*100) 
percentage_other = ((other_count/total_count)*100)
?
gender_df = pd.DataFrame({"Gender": ["Male", "Female", "Other / Non-Disclosed"],"Total Count": [male_count, female_count, other_count], "Percentage of Players": [percentage_male, percentage_female, percentage_other],
                                        }, columns = ["Gender","Total Count", "Percentage of Players"])
                                        
gender_summary = gender_df.set_index("Gender")
gender_summary.style.format({"Percentage of Players": "{:.2f}%"})
Total Count	Percentage of Players
Gender		
Male	484	84.03%
Female	81	14.06%
Other / Non-Disclosed	11	1.91%
Purchasing Analysis (Gender)
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame

purchase_data[purchase_data
total_purchase = purchase_data["Price"].count()
male_purchase= purchase_data[purchase_data["Gender"] == "Male"]["Price"].count()
female_purchase = purchase_data[purchase_data["Gender"] == "Female"]["Price"].count()
other_purchase = total_purchase - male_purchase - female_purchase
male_price_avg = purchase_data[purchase_data["Gender"] == "Male"]['Price'].mean()
female_price_avg= purchase_data[purchase_data["Gender"] == "Female"]['Price'].mean()
other_price_avg = purchase_data[purchase_data["Gender"] == "Other / Non-Disclosed"]['Price'].mean()
male_price_ttl = purchase_data[purchase_data["Gender"] == "Male"]['Price'].sum()
female_price_ttl = purchase_data[purchase_data["Gender"] == "Female"]['Price'].sum()
other_price_ttl = purchase_data[purchase_data["Gender"] == "Other / Non-Disclosed"]['Price'].sum()
female_avg_purchase = male_price_ttl/male_count
male_avg_purchase = female_price_ttl/female_count
other_avg_purchase = other_price_ttl/other_count
?
gender_purchase_df = pd.DataFrame({"Gender": ["Female", "Male", "Other / Non-Disclosed"], "Purchase Count": [female_purchase, male_purchase, other_purchase],
                                        "Average Purchase Price": [female_price_avg, male_price_avg, other_price_avg], "Total Purchase Value": [female_price_ttl, male_price_ttl, other_price_ttl],
                                "Avg Total Purchase per Person": [female_avg_purchase,male_avg_purchase,other_avg_purchase ]}, columns = 
                                        ["Gender", "Purchase Count", "Average Purchase Price", "Total Purchase Value", "Avg Total Purchase per Person"])
                                        
gender_purchase_summary = gender_purchase_df.set_index("Gender")
gender_purchase_summary.style.format({"Average Purchase Price": "${:.2f}", "Total Purchase Value": "${:.2f}", "Avg Total Purchase per Person": "${:.2f}"})
Purchase Count	Average Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Gender				
Female	113	$3.20	$361.94	$4.07
Male	652	$3.02	$1967.64	$4.47
Other / Non-Disclosed	15	$3.35	$50.19	$4.56
Age Demographics
Establish bins for ages
Categorize the existing players using the age bins. Hint: use pd.cut()
Calculate the numbers and percentages by age group
Create a summary data frame to hold the results
Optional: round the percentage column to two decimal points
Display Age Demographics Table

ftymore
lessten = purchase_data[purchase_data["Age"] <10]
lessftn = purchase_data[purchase_data["Age"] >=10 & (purchase_data["Age"] <=14)]
lessntn = purchase_data[purchase_data["Age"] >=15 & (purchase_data["Age"] <=19)]
lesstwf = purchase_data[purchase_data["Age"] >=20 & (purchase_data["Age"] <=24)]
lesstwn = purchase_data[purchase_data["Age"] >=25 & (purchase_data["Age"] <=29)]
lesstrf = purchase_data[purchase_data["Age"] >=30 & (purchase_data["Age"] <=34)]
lesstrn = purchase_data[purchase_data["Age"] >=35 & (purchase_data["Age"] <=39)]
ftymore = purchase_data[purchase_data["Age"] >=40]
?
age_demo_df = pd.DataFrame({"Age": ["<10", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40+"],
                            "Total Count": [lessten["SN"].nunique(), lessftn["SN"].nunique(), lessntn["SN"].nunique(), lesstwf["SN"].nunique(),lesstwn["SN"].nunique(), lesstrf["SN"].nunique(), lesstrn["SN"].nunique(), ftymore["SN"].nunique()],
                           "Percentage of Players": [(lessten["SN"].nunique()/total_count)*100, (lessftn["SN"].nunique()/total_count)*100, (lessntn["SN"].nunique()/total_count)*100, (lesstwf["SN"].nunique()/total_count)*100, (lesstwn["SN"].nunique()/total_count)*100, (lesstrf["SN"].nunique()/total_count)*100, (lesstrn["SN"].nunique()/total_count)*100, (ftymore["SN"].nunique()/total_count)*100]
                        })
?
age_demo_summary = age_demo_df.set_index("Age")
age_demo_summary.style.format({"Percentage of Players": "{:.2f}%"})
Total Count	Percentage of Players
Age		
<10	17	2.95%
10-14	576	100.00%
15-19	576	100.00%
20-24	576	100.00%
25-29	576	100.00%
30-34	576	100.00%
35-39	576	100.00%
40+	12	2.08%
Purchasing Analysis (Age)
Bin the purchase_data data frame by age
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame

e
age_purchase_df = pd.DataFrame({"Age": ["<10", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44"],
                              "Purchase Count": [lessten["Price"].count(), lessftn["Price"].count(), lessntn["Price"].count(), lesstwf["Price"].count(), lesstwn["Price"].count(), lesstrf["Price"].count(), lesstrn["Price"].count(), ftymore["Price"].count()],
                              "Average Purchase Price": [lessten["Price"].mean(), lessftn["Price"].mean(), lessntn["Price"].mean(), lesstwf["Price"].mean(), lesstwn["Price"].mean(), lesstrf["Price"].mean(), lesstrn["Price"].mean(), ftymore["Price"].mean()], 
                              "Total Purchase Value": [lessten["Price"].sum(), lessftn["Price"].sum(), lessntn["Price"].sum(), lesstwf["Price"].sum(), lesstwn["Price"].sum(), lesstrf["Price"].sum(), lesstrn["Price"].sum(), ftymore["Price"].sum()],
                              "Avg Total Purchase per Person":[lessten["Price"].sum()/lessten['SN'].nunique(), lessftn["Price"].sum()/lessftn['SN'].nunique(), 
                                                    lessntn["Price"].sum()/lessntn['SN'].nunique(), lesstwf["Price"].sum()/lesstwf['SN'].nunique(),
                                                    lesstwn["Price"].sum()/lesstwn['SN'].nunique(), lesstrf["Price"].sum()/lesstrf['SN'].nunique(), 
                                                    lesstrn["Price"].sum()/lesstrn['SN'].nunique(), ftymore["Price"].sum()/ftymore['SN'].nunique()]},
                                columns = ["Age", "Purchase Count", "Average Purchase Price", "Total Purchase Value", "Avg Total Purchase per Person"])
?
age_purchase_final = age_purchase_df.set_index("Age")
?
age_purchase_final.style.format({"Average Purchase Price": "${:.2f}", "Total Purchase Value": "${:.2f}", "Avg Total Purchase per Person": "${:.2f}"})
Purchase Count	Average Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Age				
<10	23	$3.35	$77.13	$4.54
10-14	780	$3.05	$2379.77	$4.13
15-19	780	$3.05	$2379.77	$4.13
20-24	780	$3.05	$2379.77	$4.13
25-29	780	$3.05	$2379.77	$4.13
30-34	780	$3.05	$2379.77	$4.13
35-39	780	$3.05	$2379.77	$4.13
40-44	13	$2.94	$38.24	$3.19
Top Spenders
Run basic calculations to obtain the results in the table below
Create a summary data frame to hold the results
Sort the total purchase value column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame

join
sn_total_purchase = purchase_data.groupby('SN')['Price'].sum().to_frame()
sn_purchase_count = purchase_data.groupby('SN')['Price'].count().to_frame()
sn_purchase_avg = purchase_data.groupby('SN')['Price'].mean().to_frame()
?
sn_total_purchase.columns=["Total Purchase Value"]
join_one = sn_total_purchase.join(sn_purchase_count, how="left")
join_one.columns=["Total Purchase Value", "Purchase Count"]
?
join_two = join_one.join(sn_purchase_avg, how="inner")
join_two.columns=["Total Purchase Value", "Purchase Count", "Average Purchase Price"]
?
join_df = join_two[["Purchase Count", "Average Purchase Price", "Total Purchase Value"]]
join_summary = join_df.sort_values('Total Purchase Value', ascending=False).head()
join_summary.style.format({"Average Purchase Price": "${:.2f}", "Total Purchase Value": "${:.2f}"})
Purchase Count	Average Purchase Price	Total Purchase Value
SN			
Lisosia93	5	$3.79	$18.96
Idastidru52	4	$3.86	$15.45
Chamjask73	3	$4.61	$13.83
Iral74	4	$3.40	$13.62
Iskadarya95	3	$4.37	$13.10
Most Popular Items
Retrieve the Item ID, Item Name, and Item Price columns
Group by Item ID and Item Name. Perform calculations to obtain purchase count, item price, and total purchase value
Create a summary data frame to hold the results
Sort the purchase count column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame

ID
group_one = purchase_data.groupby("Item Name").sum().reset_index()
group_two = purchase_data.groupby("Item ID").sum().reset_index()
group_three = purchase_data.groupby("Item Name").count().reset_index()
?
?
mergeone = pd.merge(group_one, group_two, on="Price")
mergetwo = pd.merge(group_three, mergeone, on="Item Name")
?
mergetwo["Gender"] = (mergetwo["Price_y"]/mergetwo["Item ID"]).round(2)
?
mergetwo_renamed = mergetwo.rename(columns={"Age": "Purchase Count", "Gender": "Item Price", "Item ID": "null", "Price_y": "Total Purchase Value", "Item ID_y": "Item ID"})
?
clean_df = mergetwo_renamed[["Item ID", "Item Name", "Purchase Count", "Item Price", "Total Purchase Value"]]
?
new_df = clean_df.set_index(['Item ID', 'Item Name'])
summary_df = new_df.sort_values('Purchase Count', ascending=False).head(6)
summary_df.style.format({"Item Price": "${:.2f}", "Total Purchase Value": "${:.2f}"})
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
82	Nirvana	9	$4.90	$44.10
145	Fiery Glass Crusader	9	$4.58	$41.22
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77
103	Singed Scalpel	8	$4.35	$34.80
60	Wolf	8	$3.54	$28.32
Most Profitable Items
Sort the above table by total purchase value in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the data frame

preview_summary = summary_df.sort_values('Total Purchase Value', ascending=False).head()
preview_summary.style.format({"Item Price": "${:.2f}", "Total Purchase Value": "${:.2f}"})
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
82	Nirvana	9	$4.90	$44.10
145	Fiery Glass Crusader	9	$4.58	$41.22
103	Singed Scalpel	8	$4.35	$34.80
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77